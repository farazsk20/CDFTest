import { Component, INotifyPropertyChanged, ChildProperty, L10n } from '@syncfusion/ej2-base';
import { ModuleDeclaration, EmitType } from '@syncfusion/ej2-base';
import { PdfViewerModel } from './pdfviewer-model';
import { ToolbarSettingsModel } from './pdfviewer-model';
import { ServerActionSettingsModel } from './pdfviewer-model';
import { Navigation } from './index';
import { Magnification } from './index';
import { Toolbar } from './index';
import { ToolbarItem } from './index';
import { LinkTarget, InteractionMode } from './base/types';
import { LinkAnnotation } from './index';
import { ThumbnailView } from './index';
import { BookmarkView } from './index';
import { TextSelection } from './index';
import { TextSearch } from './index';
import { Print } from './index';
import { IUnloadEventArgs, ILoadEventArgs, ILoadFailedEventArgs, IAjaxRequestFailureEventArgs, IPageChangeEventArgs, IPageClickEventArgs, IZoomChangeEventArgs, IHyperlinkClickEventArgs } from './index';
/**
 * The `ToolbarSettings` module is used to provide the toolbar settings of PDF viewer.
 * @hidden
 */
export declare class ToolbarSettings extends ChildProperty<ToolbarSettings> {
    /**
     * Enable or disables the toolbar of PdfViewer.
     */
    showTooltip: boolean;
    /**
     * shows only the defined options in the PdfViewer.
     */
    toolbarItem: ToolbarItem[];
}
/**
 * The `ServerActionSettings` module is used to provide the server action methods of PDF viewer.
 * @hidden
 */
export declare class ServerActionSettings extends ChildProperty<ServerActionSettings> {
    /**
     * specifies the load action of PdfViewer.
     */
    load: string;
    /**
     * specifies the unload action of PdfViewer.
     */
    unload: string;
    /**
     * specifies the render action of PdfViewer.
     */
    renderPages: string;
    /**
     * specifies the print action of PdfViewer.
     */
    print: string;
    /**
     * specifies the download action of PdfViewer.
     */
    download: string;
    /**
     * specifies the download action of PdfViewer.
     */
    renderThumbnail: string;
}
/**
 * Represents the PDF viewer component.
 * ```html
 * <div id="pdfViewer"></div>
 * <script>
 *  var pdfViewerObj = new PdfViewer();
 *  pdfViewerObj.appendTo("#pdfViewer");
 * </script>
 * ```
 */
export declare class PdfViewer extends Component<HTMLElement> implements INotifyPropertyChanged {
    /**
     * Defines the service url of the PdfViewer control.
     */
    serviceUrl: string;
    /**
     * Returns the page count of the document loaded in the PdfViewer control.
     */
    readonly pageCount: number;
    /**
     * Returns the current page number of the document displayed in the PdfViewer control.
     */
    readonly currentPageNumber: number;
    /**
     * Sets the PDF document path for initial loading.
     */
    documentPath: string;
    /**
     * Returns the current zoom percentage of the PdfViewer control.
     */
    readonly zoomPercentage: number;
    /**
     * Gets or sets the document name loaded in the PdfViewer control.
     */
    fileName: string;
    /**
     * Defines the scrollable height of the PdfViewer control.
     * @default auto
     */
    height: string | number;
    /**
     * Defines the scrollable width of the PdfViewer control.
     * @default auto
     */
    width: string | number;
    /**
     * Enable or disables the toolbar of PdfViewer.
     * @default true
     */
    enableToolbar: boolean;
    /**
     * Enable or disables the download option of PdfViewer.
     * @default true
     */
    enableDownload: boolean;
    /**
     * Enable or disables the print option of PdfViewer.
     * @default true
     */
    enablePrint: boolean;
    /**
     * Enables or disables the thumbnail view in the PDF viewer
     * @default true
     */
    enableThumbnail: boolean;
    /**
     * Enables or disables the bookmark view in the PDF viewer
     * @default true
     */
    enableBookmark: boolean;
    /**
     * Enables or disables the hyperlinks in PDF document.
     * @default true
     */
    enableHyperlink: boolean;
    /**
     * Specifies the open state of the hyperlink in the PDF document.
     * @default CurrentTab
     */
    hyperlinkOpenState: LinkTarget;
    /**
     * Enable or disables the Navigation module of PdfViewer.
     * @default true
     */
    enableNavigation: boolean;
    /**
     * Enable or disables the Magnification module of PdfViewer.
     * @default true
     */
    enableMagnification: boolean;
    /**
     * Enable or disables the text selection in the PdfViewer.
     * @default true
     */
    enableTextSelection: boolean;
    /**
     * Enable or disables the text search in the PdfViewer.
     * @default true
     */
    enableTextSearch: boolean;
    /**
     * Sets the interaction mode of the PdfViewer
     * @default TextSelection
     */
    interactionMode: InteractionMode;
    /**
     * Defines the settings of the PdfViewer toolbar.
     */
    toolbarSettings: ToolbarSettingsModel;
    /**
     * Defines the settings of the PdfViewer service.
     */
    serverActionSettings: ServerActionSettingsModel;
    private viewerBase;
    /**
     * @private
     */
    navigationModule: Navigation;
    /**
     * @private
     */
    toolbarModule: Toolbar;
    /**
     * @private
     */
    magnificationModule: Magnification;
    /**
     * @private
     */
    linkAnnotationModule: LinkAnnotation;
    /** @hidden */
    localeObj: L10n;
    /**
     * @private
     */
    thumbnailViewModule: ThumbnailView;
    /**
     * @private
     */
    bookmarkViewModule: BookmarkView;
    /**
     * @private
     */
    textSelectionModule: TextSelection;
    /**
     * @private
     */
    textSearchModule: TextSearch;
    /**
     * @private
     */
    printModule: Print;
    /**
     * Gets the bookmark view object of the pdf viewer.
     * @returns { BookmarkView }
     */
    readonly bookmark: BookmarkView;
    /**
     * Gets the print object of the pdf viewer.
     * @returns { Print }
     */
    readonly print: Print;
    /**
     * Gets the magnification object of the pdf viewer.
     * @returns { Magnification }
     */
    readonly magnification: Magnification;
    /**
     * Gets the navigation object of the pdf viewer.
     * @returns { Navigation }
     */
    readonly navigation: Navigation;
    /**
     * Gets the text search object of the pdf viewer.
     * @returns { TextSearch }
     */
    readonly textSearch: TextSearch;
    /**
     * Gets the toolbar object of the pdf viewer.
     * @returns { Toolbar }
     */
    readonly toolbar: Toolbar;
    /**
     * Triggers while loading document into PdfViewer.
     * @event
     */
    documentLoad: EmitType<ILoadEventArgs>;
    /**
     * Triggers while close the document
     * @event
     */
    documentUnload: EmitType<IUnloadEventArgs>;
    /**
     * Triggers while loading document got failed in PdfViewer.
     * @event
     */
    documentLoadFailed: EmitType<ILoadFailedEventArgs>;
    /**
     * Triggers when the AJAX request is failed.
     * @event
     */
    ajaxRequestFailed: EmitType<IAjaxRequestFailureEventArgs>;
    /**
     * Triggers when the mouse click is performed over the page of the PDF document.
     * @event
     */
    pageClick: EmitType<IPageClickEventArgs>;
    /**
     * Triggers when there is change in current page number.
     * @event
     */
    pageChange: EmitType<IPageChangeEventArgs>;
    /**
     * Triggers when hyperlink in the PDF Document is clicked
     * @event
     */
    hyperlinkClick: EmitType<IHyperlinkClickEventArgs>;
    /**
     * Triggers when there is change in the magnification value.
     * @event
     */
    zoomChange: EmitType<IZoomChangeEventArgs>;
    constructor(options?: PdfViewerModel, element?: string | HTMLElement);
    protected preRender(): void;
    protected render(): void;
    getModuleName(): string;
    /**
     * @private
     */
    getLocaleConstants(): Object;
    onPropertyChanged(newProp: PdfViewerModel, oldProp: PdfViewerModel): void;
    getPersistData(): string;
    requiredModules(): ModuleDeclaration[];
    /** @hidden */
    defaultLocale: Object;
    /**
     * Loads the given PDF document in the PDF viewer control
     * @param  {string} document
     * @param  {string} password
     * @returns void
     */
    load(document: string, password: string): void;
    /**
     * Downloads the PDF document being loaded in the ejPdfViewer control.
     * @returns void
     */
    download(): void;
    /**
     * Unloads the PDF document being displayed in the PDF viewer.
     * @returns void
     */
    unload(): void;
    /**
     * Destroys all managed resources used by this object.
     */
    destroy(): void;
    /**
     * @private
     */
    fireDocumentLoad(): void;
    /**
     * @private
     */
    fireDocumentUnload(fileName: string): void;
    /**
     * @private
     */
    fireDocumentLoadFailed(isPasswordRequired: boolean, password: string): void;
    /**
     * @private
     */
    fireAjaxRequestFailed(errorStatusCode: number, errorMessage: string): void;
    /**
     * @private
     */
    firePageClick(x: number, y: number, pageNumber: number): void;
    /**
     * @private
     */
    firePageChange(previousPageNumber: number): void;
    /**
     * @private
     */
    fireZoomChange(): void;
    /**
     * @private
     */
    fireHyperlinkClick(hyperlink: string): void;
}
