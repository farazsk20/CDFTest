import { PdfViewer, TextLayer, ContextMenu } from '../index';
import { NavigationPane } from './navigation-pane';
/**
 * The `ISize` module is used to handle page size property of PDF viewer.
 * @hidden
 */
export interface ISize {
    width: number;
    height: number;
    top: number;
}
/**
 * The `IPinchZoomStorage` module is used to handle pinch zoom storage of PDF viewer.
 * @hidden
 */
export interface IPinchZoomStorage {
    index: number;
    pinchZoomStorage: object;
}
/**
 * The `PdfViewerBase` module is used to handle base methods of PDF viewer.
 * @hidden
 */
export declare class PdfViewerBase {
    /**
     * @private
     */
    viewerContainer: HTMLElement;
    /**
     * @private
     */
    contextMenuModule: ContextMenu;
    /**
     * @private
     */
    pageSize: ISize[];
    /**
     * @private
     */
    pageCount: number;
    /**
     * @private
     */
    currentPageNumber: number;
    /**
     * @private
     */
    textLayer: TextLayer;
    private pdfViewer;
    private isDocumentLoaded;
    /**
     * @private
     */
    documentId: string;
    /**
     * @private
     */
    renderedPagesList: number[];
    /**
     * @private
     */
    pageGap: number;
    private pageLeft;
    private sessionLimit;
    private pageStopValue;
    private toolbarHeight;
    private pageLimit;
    private previousPage;
    private isViewerMouseDown;
    private isViewerMouseWheel;
    private scrollPosition;
    private sessionStorage;
    /**
     * @private
     */
    pageContainer: HTMLElement;
    private scrollHoldTimer;
    private isFileName;
    private pointerCount;
    private pointersForTouch;
    private corruptPopup;
    private passwordPopup;
    private isPasswordAvailable;
    private document;
    private waitingPopup;
    /**
     * @private
     */
    reRenderedCount: number;
    private passwordInput;
    private promptElement;
    /**
     * @private
     */
    navigationPane: NavigationPane;
    private mouseX;
    private mouseY;
    /**
     * @private
     */
    hashId: string;
    private documentLiveCount;
    /**
     * @private
     */
    mainContainer: HTMLElement;
    /**
     * @private
     */
    viewerMainContainer: HTMLElement;
    private printMainContainer;
    private printWaitingPopup;
    private touchClientX;
    private touchClientY;
    private isLongTouchPropagated;
    private longTouchTimer;
    private isViewerContainerDoubleClick;
    private dblClickTimer;
    /**
     * @private
     */
    pinchZoomStorage: IPinchZoomStorage[];
    private isPinchZoomStorage;
    /**
     * @private
     */
    isTextSelectionDisabled: boolean;
    private isPanMode;
    private dragX;
    private dragY;
    private isScrollbarMouseDown;
    constructor(viewer: PdfViewer);
    /**
     * @private
     */
    initializeComponent(): void;
    /**
     * @private
     */
    initiatePageRender(documentData: string, password: string): void;
    private createAjaxRequest;
    /**
     * @private
     */
    openNotificationPopup(): void;
    private requestSuccess;
    private pageRender;
    private renderPasswordPopup;
    private renderCorruptPopup;
    private constructJsonObject;
    private checkDocumentData;
    private setFileName;
    private saveDocumentInfo;
    private saveDocumentHashData;
    private updateWaitingPopup;
    private createWaitingPopup;
    private showLoadingIndicator;
    private showPageLoadingIndicator;
    /**
     * @private
     */
    showPrintLoadingIndicator(isShow: boolean): void;
    private setLoaderProperties;
    /**
     * @private
     */
    updateScrollTop(pageNumber: number): void;
    /**
     * @private
     */
    getZoomFactor(): number;
    /**
     * @private
     */
    getPinchZoomed(): boolean;
    /**
     * @private
     */
    getMagnified(): boolean;
    private getPinchScrolled;
    private getPagesPinchZoomed;
    private getPagesZoomed;
    private getRerenderCanvasCreated;
    /**
     * @private
     */
    getDocumentId(): string;
    /**
     * @private
     */
    download(): void;
    /**
     * @private
     */
    clear(isTriggerEvent: boolean): void;
    /**
     * @private
     */
    destroy(): void;
    /**
     * @private
     */
    unloadDocument(e: any): void;
    /**
     * @private
     */
    private windowSessionStorageClear;
    /**
     * @private
     */
    focusViewerContainer(): void;
    private getScrollParent;
    private createCorruptedPopup;
    private closeCorruptPopup;
    private createPrintPopup;
    private createPasswordPopup;
    private passwordCancel;
    private passwordCancelClick;
    private passwordDialogReset;
    private applyPassword;
    private wireEvents;
    private unWireEvents;
    /**
     * @private
     */
    onWindowResize: () => void;
    /**
     * @private
     */
    updateZoomValue(): void;
    private viewerContainerOnMousedown;
    private viewerContainerOnMouseup;
    private viewerContainerOnMouseWheel;
    private viewerContainerOnKeyDown;
    private viewerContainerOnMousemove;
    private panOnMouseMove;
    /**
     * @private
     */
    initiatePanning(): void;
    /**
     * @private
     */
    initiateTextSelectMode(): void;
    private viewerContainerOnMouseLeave;
    private viewerContainerOnMouseEnter;
    private viewerContainerOnMouseOver;
    private viewerContainerOnClick;
    private applySelection;
    private viewerContainerOnDragStart;
    private viewerContainerOnContextMenuClick;
    private onWindowMouseUp;
    private onWindowTouchEnd;
    private viewerContainerOnTouchStart;
    private viewerContainerOnLongTouch;
    private viewerContainerOnPointerDown;
    private preventTouchEvent;
    private viewerContainerOnTouchMove;
    private viewerContainerOnPointerMove;
    private viewerContainerOnTouchEnd;
    private viewerContainerOnPointerEnd;
    private initPageDiv;
    private renderElementsVirtualScroll;
    private renderPageElement;
    private renderPagesVirtually;
    private initiateRenderPagesVirtually;
    private renderPage;
    private renderTextContent;
    private renderPageContainer;
    private orderPageDivElements;
    /**
     * @private
     */
    renderPageCanvas(pageDiv: HTMLElement, pageWidth: number, pageHeight: number, pageNumber: number): HTMLElement;
    /**
     * @private
     */
    updateLeftPosition(pageIndex: number): number;
    /**
     * @private
     */
    applyLeftPosition(pageIndex: number): void;
    private updatePageHeight;
    private viewerContainerOnScroll;
    private initiatePageViewScrollChanged;
    private renderCountIncrement;
    /**
     * @private
     */
    pageViewScrollChanged(currentPageNumber: number): void;
    private downloadDocument;
    private createRequestForDownload;
    private createRequestForRender;
    /**
     * @private
     */
    getStoredData(pageIndex: number): any;
    /**
     * @private
     */
    storeWinData(data: any, pageIndex: number): void;
    private getPinchZoomPage;
    private getWindowSessionStorage;
    private manageSessionStorage;
    private createBlobUrl;
    private getRandomNumber;
    private createGUID;
    private isClickedOnScrollBar;
    private setScrollDownValue;
    /**
     * @private
     */
    disableTextSelectionMode(): void;
    /**
     * @private
     */
    getElement(idString: string): HTMLElement;
    /**
     * @private
     */
    getPageWidth(pageIndex: number): number;
    /**
     * @private
     */
    getPageHeight(pageIndex: number): number;
    /**
     * @private
     */
    getPageTop(pageIndex: number): number;
}
