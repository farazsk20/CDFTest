import { getObject, Grid, Reorder as GridReorder } from '@syncfusion/ej2-grids';
/**
 * TreeGrid Reorder module
 * @hidden
 */
var Reorder = /** @class */ (function () {
    /**
     * Constructor for Reorder module
     */
    function Reorder(parent, treeColumn) {
        Grid.Inject(GridReorder);
        this.parent = parent;
        this.treeColumn = treeColumn;
        this.addEventListener();
    }
    /**
     * For internal use only - Get the module name.
     * @private
     */
    Reorder.prototype.getModuleName = function () {
        return 'reorder';
    };
    /**
     * @hidden
     */
    Reorder.prototype.addEventListener = function () {
        this.parent.on('getColumnIndex', this.getTreeColumn, this);
        this.parent.on('setColumnIndex', this.setTreeColumnIndex, this);
    };
    Reorder.prototype.removeEventListener = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off('getColumnIndex', this.getTreeColumn);
        this.parent.off('setColumnIndex', this.getTreeColumn);
    };
    /**
     * To destroy the Reorder
     * @return {void}
     * @hidden
     */
    Reorder.prototype.destroy = function () {
        this.removeEventListener();
    };
    Reorder.prototype.getTreeColumn = function () {
        this.treeColumn = this.parent.columns[this.parent.treeColumnIndex];
    };
    Reorder.prototype.setTreeColumnIndex = function () {
        var treeIndex;
        for (var f = 0; f < this.parent.columns.length; f++) {
            var treeColumnfield = getObject('field', this.treeColumn);
            var parentColumnfield = getObject('field', this.parent.columns[f]);
            if (treeColumnfield === parentColumnfield) {
                treeIndex = f;
            }
        }
        this.parent.treeColumnIndex = treeIndex;
    };
    return Reorder;
}());
export { Reorder };
