import { Grid, Edit as GridEdit, getUid, getObject } from '@syncfusion/ej2-grids';
import * as events from '../base/constant';
import { isNullOrUndefined, extend, setValue, removeClass } from '@syncfusion/ej2-base';
import { DataManager } from '@syncfusion/ej2-data';
import { findChildrenRecords } from '../utils';
import { getPlainData, extendArray } from '../utils';
/**
 * TreeGrid Edit Module
 * The `Edit` module is used to handle editing actions.
 */
var Edit = /** @class */ (function () {
    /**
     * Constructor for Edit module
     */
    function Edit(parent) {
        Grid.Inject(GridEdit);
        this.parent = parent;
        this.isSelfReference = !isNullOrUndefined(parent.parentIdMapping);
        // this.batchDeleted = {};
        // this.batchRecords = [];
        // this.isAdd = false;
        this.previousNewRowPosition = null;
        this.addEventListener();
    }
    /**
     * For internal use only - Get the module name.
     * @private
     */
    Edit.prototype.getModuleName = function () {
        return 'edit';
    };
    /**
     * @hidden
     */
    Edit.prototype.addEventListener = function () {
        this.parent.on(events.crudAction, this.editAction, this);
        this.parent.on(events.beginEdit, this.beginEdit, this);
        this.parent.on(events.beginAdd, this.beginAdd, this);
        this.parent.on(events.recordDoubleClick, this.recordDoubleClick, this);
        this.parent.on(events.cellSave, this.cellSave, this);
        this.parent.on(events.batchCancel, this.batchCancel, this);
        this.parent.grid.on(events.keyPressed, this.keyPressed, this);
        this.parent.on(events.cellEdit, this.cellEdit, this);
        this.parent.grid.on(events.doubleTap, this.recordDoubleClick, this);
        this.parent.on('savePreviousRowPosition', this.savePreviousRowPosition, this);
        // this.parent.on(events.beforeDataBound, this.beforeDataBound, this);
        // this.parent.on(events.cellSaved, this.cellSaved, this);
        // this.parent.on(events.batchDelete, this.batchDelete, this);
        // this.parent.on(events.batchAdd, this.batchAdd, this);
        // this.parent.on(events.beforeBatchAdd, this.beforeBatchAdd, this);
        // this.parent.on(events.beforeBatchSave, this.beforeBatchSave, this);
        // this.parent.on(events.batchSave, this.batchSave, this);
    };
    /**
     * @hidden
     */
    Edit.prototype.removeEventListener = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(events.crudAction, this.editAction);
        this.parent.off(events.beginEdit, this.beginEdit);
        this.parent.off(events.beginAdd, this.beginAdd);
        this.parent.off(events.recordDoubleClick, this.recordDoubleClick);
        this.parent.off(events.cellSave, this.cellSave);
        this.parent.off(events.batchCancel, this.batchCancel);
        this.parent.grid.off(events.keyPressed, this.keyPressed);
        this.parent.off(events.cellEdit, this.cellEdit);
        this.parent.grid.off(events.doubleTap, this.recordDoubleClick);
        this.parent.off('savePreviousRowPosition', this.savePreviousRowPosition);
    };
    /**
     * To destroy the editModule
     * @return {void}
     * @hidden
     */
    Edit.prototype.destroy = function () {
        this.removeEventListener();
    };
    /**
     * @hidden
     */
    Edit.prototype.applyFormValidation = function (cols) {
        this.parent.grid.editModule.applyFormValidation(cols);
    };
    Edit.prototype.recordDoubleClick = function (args) {
        var target = args.target;
        this.doubleClickTarget = target;
        var column = this.parent.grid.getColumnByIndex(+target.closest('td').getAttribute('aria-colindex'));
        if (this.parent.editSettings.mode === 'Cell' && !this.isOnBatch && column && !column.isPrimaryKey &&
            column.allowEditing && !(target.classList.contains('e-treegridexpand') ||
            target.classList.contains('e-treegridcollapse'))) {
            this.isOnBatch = true;
            this.parent.grid.setProperties({ selectedRowIndex: args.rowIndex }, true);
            this.updateGridEditMode('Batch');
        }
    };
    Edit.prototype.updateGridEditMode = function (mode) {
        this.parent.grid.setProperties({ editSettings: { mode: mode } }, true);
        var updateMethod = getObject('updateEditObj', this.parent.grid.editModule);
        updateMethod.apply(this.parent.grid.editModule);
        this.parent.grid.isEdit = false;
    };
    Edit.prototype.keyPressed = function (args) {
        if (this.isOnBatch) {
            this.keyPress = args.action;
        }
    };
    Edit.prototype.cellEdit = function (args) {
        if (this.doubleClickTarget && (this.doubleClickTarget.classList.contains('e-treegridexpand') ||
            this.doubleClickTarget.classList.contains('e-treegridcollapse'))) {
            args.cancel = true;
            this.doubleClickTarget = null;
            return;
        }
        if (this.parent.editSettings.mode === 'Cell') {
            if (this.keyPress === 'tab' || this.keyPress === 'shiftTab') {
                this.keyPress = null;
            }
            else if (this.keyPress === 'enter') {
                args.cancel = true;
                this.keyPress = null;
            }
            if (!args.cancel) {
                this.enableToolbarItems('edit');
            }
        }
        // if (this.isAdd && this.parent.editSettings.mode === 'Batch' && !args.cell.parentElement.classList.contains('e-insertedrow')) {
        //   this.isAdd = false;
        // }
    };
    Edit.prototype.enableToolbarItems = function (request) {
        if (!isNullOrUndefined(this.parent.grid.toolbarModule)) {
            var toolbarID = this.parent.element.id + '_gridcontrol_';
            this.parent.grid.toolbarModule.enableItems([toolbarID + 'add', toolbarID + 'edit', toolbarID + 'delete'], request === 'save');
            this.parent.grid.toolbarModule.enableItems([toolbarID + 'update', toolbarID + 'cancel'], request === 'edit');
        }
    };
    Edit.prototype.batchCancel = function (e) {
        if (this.parent.editSettings.mode === 'Cell') {
            this.parent.renderModule.cellRender({
                data: this.parent.grid.getSelectedRecords()[0],
                cell: this.parent.grid.getSelectedRows()[0].cells[this.parent.treeColumnIndex],
                column: this.parent.grid.getColumns()[this.parent.treeColumnIndex]
            });
            this.updateGridEditMode('Normal');
            this.isOnBatch = false;
        }
        // this.batchRecords = [];
        // let keys: string[] = Object.keys(this.batchDeleted);
        // let primaryLey: string = this.parent.grid.getPrimaryKeyFieldNames()[0];
        // let currentViewRecords: ITreeData[] = this.parent.grid.getCurrentViewRecords();
        // for (let i: number = 0; i < keys.length; i++) {
        //   let index: number;
        //   currentViewRecords.map((e: ITreeData, j: number) => {
        //     if (this.batchDeleted.hasOwnProperty(keys[i]) && e[primaryLey] === this.batchDeleted[keys[i]][primaryLey]) {
        //       index = j; return;
        //     }
        //   });
        //   this.parent.renderModule.cellRender({
        //     data: currentViewRecords[index],
        //     cell: (<HTMLTableRowElement>this.parent.getRowByIndex(index)).cells[this.parent.treeColumnIndex],
        //     column: this.parent.grid.getColumns()[this.parent.treeColumnIndex]
        //   });
        // }
    };
    Edit.prototype.cellSave = function (args) {
        if (this.parent.editSettings.mode === 'Cell') {
            args.cancel = true;
            setValue('isEdit', false, this.parent.grid);
            args.rowData[args.columnName] = args.value;
            var row = args.cell.parentNode;
            var rowIndex_1;
            var primaryKeys_1 = this.parent.getPrimaryKeyFieldNames();
            if (isNullOrUndefined(row)) {
                this.parent.grid.getCurrentViewRecords().filter(function (e, i) {
                    if (e[primaryKeys_1[0]] === args.rowData[primaryKeys_1[0]]) {
                        rowIndex_1 = i;
                        return;
                    }
                });
            }
            else {
                rowIndex_1 = row.rowIndex;
            }
            row = this.parent.grid.getRows()[rowIndex_1];
            this.parent.grid.editModule.updateRow(rowIndex_1, args.rowData);
            if (this.parent.grid.aggregateModule) {
                this.parent.grid.aggregateModule.refresh(args.rowData);
            }
            this.parent.grid.editModule.formObj.destroy();
            if (this.keyPress !== 'tab' && this.keyPress !== 'shiftTab') {
                this.updateGridEditMode('Normal');
                this.isOnBatch = false;
            }
            this.enableToolbarItems('save');
            removeClass([row], ['e-editedrow', 'e-batchrow']);
            removeClass(row.querySelectorAll('.e-rowcell'), ['e-editedbatchcell', 'e-updatedtd']);
            this.editAction({ value: args.rowData, action: 'edit' }, args.columnName);
            var saveArgs = {
                type: 'save', column: this.parent.getColumnByField(args.columnName), data: args.rowData,
                previousData: args.previousValue, row: row, target: args.cell
            };
            this.parent.trigger(events.actionComplete, saveArgs);
        }
    };
    Edit.prototype.beginAdd = function (args) {
        var position;
        var index = this.addRowIndex;
        var records = this.parent.grid.getCurrentViewRecords();
        var rows = this.parent.grid.getDataRows();
        if (this.parent.editSettings.mode !== 'Dialog') {
            if (this.parent.editSettings.newRowPosition === 'Child' && !(records[index].expanded)) {
                this.parent.expandRow(rows[index + 1], records[index]);
            }
            if (this.parent.editSettings.newRowPosition === 'Above') {
                position = 'before';
            }
            else if ((this.parent.editSettings.newRowPosition === 'Below' || this.parent.editSettings.newRowPosition === 'Child')
                && this.selectedIndex > -1) {
                position = 'after';
                // let records: Object[] = this.batchRecords.length ? this.batchRecords : this.parent.grid.getCurrentViewRecords();
                index += findChildrenRecords(records[index]).length;
            }
            if (this.selectedIndex > -1 && (index || (this.parent.editSettings.newRowPosition === 'Child'
                || this.parent.editSettings.newRowPosition === 'Below'))) {
                if (index >= rows.length) {
                    index = rows.length - 2;
                }
                var focussedElement = document.activeElement;
                rows[index + 1][position](rows[0]);
                if (this.parent.editSettings.mode === 'Row' || this.parent.editSettings.mode === 'Cell') {
                    var errors = this.parent.grid.getContentTable().querySelectorAll('.e-griderror');
                    for (var i = 0; i < errors.length; i++) {
                        errors[i].remove();
                    }
                    setValue('errorRules', [], this.parent.grid.editModule.formObj);
                }
                focussedElement.focus();
            }
        }
    };
    // private beforeDataBound(args: BeforeDataBoundArgs): void {
    //   if (this.parent.grid.isEdit && this.parent.dataSource instanceof DataManager &&
    //         this.parent.dataSource.adaptor instanceof RemoteSaveAdaptor) {
    //     let action: string = getValue('action', args);
    //     let data: Object = getValue('data', args);
    //     if (action === 'edit' && !isNullOrUndefined(this.editedData)) {
    //       data = extend(this.editedData, data);
    //       this.editedData = null;
    //     }
    //     if (!isNullOrUndefined(this.addedData)) {
    //       let addedData: Object = args.result[args.result.length - 1];
    //       addedData = extend(this.addedData, addedData);
    //       this.addedData = null;
    //       args.result.splice(this.addedIndex, 0, addedData);
    //       args.result.splice(args.result.length, 1);
    //     }
    //   }
    // }
    Edit.prototype.beginEdit = function (args) {
        if (args.requestType === 'refresh' && this.isOnBatch) {
            args.cancel = true;
            return;
        }
        if (this.parent.editSettings.mode === 'Cell' && args.requestType === 'beginEdit') {
            args.cancel = true;
            return;
        }
        if (this.doubleClickTarget && (this.doubleClickTarget.classList.contains('e-treegridexpand') ||
            this.doubleClickTarget.classList.contains('e-treegridcollapse'))) {
            args.cancel = true;
            this.doubleClickTarget = null;
            return;
        }
        if (args.requestType === 'delete') {
            var data = args.data;
            for (var i = 0; i < data.length; i++) {
                args.data = data.concat(findChildrenRecords(data[i]));
            }
        }
        if (args.requestType === 'add') {
            this.selectedIndex = this.parent.grid.selectedRowIndex;
            this.addRowIndex = this.parent.grid.selectedRowIndex > -1 ? this.parent.grid.selectedRowIndex : 0;
        }
        args = this.beginAddEdit(args);
        // if (args.requestType === 'save' &&
        //    ((this.parent.dataSource instanceof DataManager && this.parent.dataSource.adaptor instanceof RemoteSaveAdaptor))) {
        //      if (args.action === 'edit') {
        //           this.editedData = args.data;
        //      } else if (args.action === 'add') {
        //           this.addedData = value;
        //      }
        // }
    };
    Edit.prototype.savePreviousRowPosition = function (args) {
        if (this.previousNewRowPosition === null) {
            this.previousNewRowPosition = this.parent.editSettings.newRowPosition;
        }
    };
    Edit.prototype.beginAddEdit = function (args) {
        var value = args.data;
        if (args.action === 'add') {
            var key = this.parent.grid.getPrimaryKeyFieldNames()[0];
            var position = null;
            // let currentData: ITreeData[] = this.batchRecords.length ? this.batchRecords :
            //            <ITreeData[]>this.parent.grid.getCurrentViewRecords();
            var currentData = this.parent.grid.getCurrentViewRecords();
            var index = this.addRowIndex;
            value.uniqueID = getUid(this.parent.element.id + '_data_');
            var level = void 0;
            var dataIndex = void 0;
            var idMapping = void 0;
            var parentUniqueID = void 0;
            var parentItem = void 0;
            var parentIdMapping = void 0;
            if (currentData.length) {
                level = currentData[this.addRowIndex].level;
                dataIndex = currentData[this.addRowIndex].index;
                idMapping = currentData[this.addRowIndex][this.parent.idMapping];
                parentIdMapping = currentData[this.addRowIndex][this.parent.parentIdMapping];
                if (currentData[this.addRowIndex].parentItem) {
                    parentUniqueID = currentData[this.addRowIndex].parentItem.uniqueID;
                }
                parentItem = currentData[this.addRowIndex].parentItem;
            }
            if (this.parent.editSettings.newRowPosition !== 'Top') {
                if (this.parent.editSettings.newRowPosition === 'Above') {
                    position = 'before';
                }
                else if (this.parent.editSettings.newRowPosition === 'Below') {
                    position = 'after';
                    index += findChildrenRecords(currentData[this.addRowIndex]).length;
                }
                else if (this.parent.editSettings.newRowPosition === 'Child') {
                    position = 'after';
                    if (this.selectedIndex > -1) {
                        value.parentItem = extend({}, currentData[this.addRowIndex]);
                        value.parentUniqueID = value.parentItem.uniqueID;
                        delete value.parentItem.childRecords;
                        delete value.parentItem[this.parent.childMapping];
                    }
                    index += findChildrenRecords(currentData[this.addRowIndex]).length;
                    value.level = level + 1;
                    if (this.isSelfReference) {
                        value[this.parent.parentIdMapping] = idMapping;
                        if (!isNullOrUndefined(value.parentItem)) {
                            this.updateParentRow(key, value.parentItem, 'add', value);
                        }
                    }
                }
                if (this.parent.editSettings.newRowPosition === 'Above' || this.parent.editSettings.newRowPosition === 'Below') {
                    if (this.selectedIndex > -1 && level) {
                        value.parentUniqueID = parentUniqueID;
                        value.parentItem = extend({}, parentItem);
                        delete value.parentItem.childRecords;
                        delete value.parentItem[this.parent.childMapping];
                    }
                    value.level = level;
                    if (this.isSelfReference) {
                        value[this.parent.parentIdMapping] = parentIdMapping;
                        if (!isNullOrUndefined(value.parentItem)) {
                            this.updateParentRow(key, value.parentItem, 'add', value);
                        }
                    }
                }
                if (position != null && this.selectedIndex > -1) {
                    args.index = position === 'before' ? index : index + 1;
                }
                if (this.parent.editSettings.newRowPosition === 'Bottom') {
                    var dataSource = (this.parent.grid.dataSource instanceof DataManager ?
                        this.parent.grid.dataSource.dataSource.json : this.parent.grid.dataSource);
                    args.index = dataSource.length;
                }
            }
            // this.addedIndex = args.index;
            value.hasChildRecords = false;
            value.childRecords = [];
            value.index = 0;
        }
        return args;
    };
    Edit.prototype.addAction = function (details, treeData) {
        var value;
        var isSkip = false;
        var currentViewRecords = this.parent.grid.getCurrentViewRecords();
        value = extend({}, details.value);
        value = getPlainData(value);
        switch (this.parent.editSettings.newRowPosition) {
            case 'Top':
                treeData.unshift(value);
                isSkip = true;
                break;
            case 'Bottom':
                treeData.push(value);
                isSkip = true;
                break;
            case 'Above':
                value = currentViewRecords[this.addRowIndex + 1];
                break;
            case 'Below':
            case 'Child':
                value = currentViewRecords[this.addRowIndex];
                if (this.selectedIndex === -1) {
                    treeData.unshift(value);
                    isSkip = true;
                }
        }
        return { value: value, isSkip: isSkip };
    };
    Edit.prototype.editAction = function (details, columnName) {
        var _this = this;
        var value = details.value;
        var action = details.action;
        if (action === 'save') {
            action = 'edit';
        }
        var i;
        var j;
        var key = this.parent.grid.getPrimaryKeyFieldNames()[0];
        var treeData = this.parent.dataSource instanceof DataManager ?
            this.parent.dataSource.dataSource.json : this.parent.dataSource;
        var modifiedData = [];
        var originalData = value;
        var isSkip = false;
        var currentViewRecords = this.parent.grid.getCurrentViewRecords();
        if (action === 'add') {
            var addAct = this.addAction(details, treeData);
            value = addAct.value;
            isSkip = addAct.isSkip;
        }
        if (value instanceof Array) {
            modifiedData = extendArray(value);
        }
        else {
            modifiedData.push(extend({}, value));
        }
        if (!isSkip && (action !== 'add' ||
            (this.parent.editSettings.newRowPosition !== 'Top' && this.parent.editSettings.newRowPosition !== 'Bottom'))) {
            for (var k = 0; k < modifiedData.length; k++) {
                var keys = Object.keys(modifiedData[k]);
                i = treeData.length;
                var _loop_1 = function () {
                    if (treeData[i][key] === modifiedData[k][key]) {
                        if (action === 'delete') {
                            var currentData_1 = treeData[i];
                            treeData.splice(i, 1);
                            if (this_1.isSelfReference) {
                                if (!isNullOrUndefined(currentData_1[this_1.parent.parentIdMapping])) {
                                    var parentData = this_1.parent.flatData.filter(function (e) {
                                        return e[_this.parent.idMapping] === currentData_1[_this.parent.parentIdMapping];
                                    })[0];
                                    var childRecords = parentData ? parentData[this_1.parent.childMapping] : [];
                                    for (var p = childRecords.length - 1; p >= 0; p--) {
                                        if (childRecords[p][this_1.parent.idMapping] === currentData_1[this_1.parent.idMapping]) {
                                            childRecords.splice(p, 1);
                                            if (!childRecords.length) {
                                                parentData.hasChildRecords = false;
                                                this_1.updateParentRow(key, parentData, action);
                                            }
                                            break;
                                        }
                                    }
                                }
                                return "break";
                            }
                        }
                        else {
                            if (action === 'edit') {
                                for (j = 0; j < keys.length; j++) {
                                    if (treeData[i].hasOwnProperty(keys[j]) && (this_1.parent.editSettings.mode !== 'Cell' || keys[j] === columnName)) {
                                        treeData[i][keys[j]] = modifiedData[k][keys[j]];
                                    }
                                }
                            }
                            else if (action === 'add') {
                                var index = void 0;
                                if (this_1.parent.editSettings.newRowPosition === 'Child') {
                                    if (this_1.isSelfReference) {
                                        originalData[this_1.parent.parentIdMapping] = treeData[i][this_1.parent.idMapping];
                                        treeData.splice(i + 1, 0, originalData);
                                    }
                                    else {
                                        if (!treeData[i].hasOwnProperty(this_1.parent.childMapping)) {
                                            treeData[i][this_1.parent.childMapping] = [];
                                        }
                                        treeData[i][this_1.parent.childMapping].push(originalData);
                                        this_1.updateParentRow(key, treeData[i], action);
                                    }
                                }
                                else if (this_1.parent.editSettings.newRowPosition === 'Below') {
                                    treeData.splice(i + 1, 0, originalData);
                                }
                                else if (!this_1.addRowIndex) {
                                    index = 0;
                                    treeData.splice(index, 0, originalData);
                                }
                                else if (this_1.parent.editSettings.newRowPosition === 'Above') {
                                    treeData.splice(i, 0, originalData);
                                }
                            }
                            return "break";
                        }
                    }
                    else if (!isNullOrUndefined(treeData[i][this_1.parent.childMapping])) {
                        if (this_1.removeChildRecords(treeData[i][this_1.parent.childMapping], modifiedData[k], action, key, originalData, columnName)) {
                            this_1.updateParentRow(key, treeData[i], action);
                        }
                    }
                };
                var this_1 = this;
                while (i-- && i >= 0) {
                    var state_1 = _loop_1();
                    if (state_1 === "break")
                        break;
                }
            }
        }
        if (action === 'add' && this.previousNewRowPosition != null) {
            this.parent.setProperties({ editSettings: { newRowPosition: this.previousNewRowPosition } }, true);
            this.previousNewRowPosition = null;
        }
    };
    Edit.prototype.removeChildRecords = function (childRecords, modifiedData, action, key, originalData, columnName) {
        var isChildAll = false;
        var j = childRecords.length;
        while (j-- && j >= 0) {
            if (childRecords[j][key] === modifiedData[key] ||
                (this.isSelfReference && childRecords[j][this.parent.parentIdMapping] === modifiedData[this.parent.idMapping])) {
                if (action === 'edit') {
                    var keys = Object.keys(modifiedData);
                    for (var i = 0; i < keys.length; i++) {
                        if (childRecords[j].hasOwnProperty(keys[i]) && (this.parent.editSettings.mode !== 'Cell' || keys[i] === columnName)) {
                            childRecords[j][keys[i]] = modifiedData[keys[i]];
                        }
                    }
                    break;
                }
                else if (action === 'add') {
                    if (this.parent.editSettings.newRowPosition === 'Child') {
                        if (this.isSelfReference) {
                            originalData[this.parent.parentIdMapping] = childRecords[j][this.parent.idMapping];
                            childRecords.splice(j + 1, 0, originalData);
                            this.updateParentRow(key, childRecords[j], action);
                        }
                        else {
                            if (!childRecords[j].hasOwnProperty(this.parent.childMapping)) {
                                childRecords[j][this.parent.childMapping] = [];
                            }
                            childRecords[j][this.parent.childMapping].push(originalData);
                            this.updateParentRow(key, childRecords[j], action);
                        }
                    }
                    else if (this.parent.editSettings.newRowPosition === 'Above') {
                        childRecords.splice(j, 0, originalData);
                    }
                    else if (this.parent.editSettings.newRowPosition === 'Below') {
                        childRecords.splice(j + 1, 0, originalData);
                    }
                }
                else {
                    var parentItem = childRecords[j].parentItem;
                    childRecords.splice(j, 1);
                    if (!childRecords.length) {
                        isChildAll = true;
                    }
                }
            }
            else if (!isNullOrUndefined(childRecords[j][this.parent.childMapping])) {
                if (this.removeChildRecords(childRecords[j][this.parent.childMapping], modifiedData, action, key, originalData, columnName)) {
                    this.updateParentRow(key, childRecords[j], action);
                }
            }
        }
        return isChildAll;
    };
    Edit.prototype.updateParentRow = function (key, record, action, child) {
        var currentRecords = this.parent.grid.getCurrentViewRecords();
        var index;
        currentRecords.map(function (e, i) { if (e[key] === record[key]) {
            index = i;
            return;
        } });
        record = currentRecords[index];
        record.hasChildRecords = false;
        if (action === 'add') {
            record.expanded = true;
            record.hasChildRecords = true;
            var childRecords = child ? child : currentRecords[index + 1];
            if (!record.hasOwnProperty('childRecords')) {
                record.childRecords = [];
            }
            if (record.childRecords.indexOf(childRecords) === -1) {
                record.childRecords.unshift(childRecords);
            }
            if (this.isSelfReference) {
                if (!record.hasOwnProperty(this.parent.childMapping)) {
                    record[this.parent.childMapping] = [];
                }
                if (record.childRecords.indexOf(childRecords) === -1) {
                    record[this.parent.childMapping].unshift(childRecords);
                }
            }
        }
        this.parent.grid.setRowData(key, record);
        var row = this.parent.getRowByIndex(index);
        this.parent.renderModule.cellRender({ data: record, cell: row.cells[this.parent.treeColumnIndex],
            column: this.parent.grid.getColumns()[this.parent.treeColumnIndex] });
    };
    /**
     * Checks the status of validation at the time of editing. If validation is passed, it returns true.
     * @return {boolean}
     */
    Edit.prototype.editFormValidate = function () {
        return this.parent.grid.editModule.editFormValidate();
    };
    /**
     * @hidden
     */
    Edit.prototype.destroyForm = function () {
        this.parent.grid.editModule.destroyForm();
    };
    return Edit;
}());
export { Edit };
