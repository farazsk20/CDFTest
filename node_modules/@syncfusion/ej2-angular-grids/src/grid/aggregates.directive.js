var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { Directive, ViewContainerRef, ContentChildren, ContentChild } from '@angular/core';
import { ComplexBase, ArrayBase, setValue } from '@syncfusion/ej2-angular-base';
import { AggregateColumnsDirective } from './aggregate-columns.directive';
var input = ['columns'];
var outputs = [];
/**
 * `e-aggregate` directive represent a aggregate row of the Angular Grid.
 * It must be contained in a Grid component(`ejs-grid`).
 * ```html
 * <ejs-grid [dataSource]='data' allowPaging='true' allowSorting='true'>
 *   <e-columns>
 *     <e-column field='ID' width='100'></e-column>
 *     <e-column field='name' headerText='Name' width='100'></e-column>
 *   </e-columns>
 *   <e-aggregates>
 *     <e-aggregate>
 *       <e-columns>
 *         <e-column field='ID' type='Min'></e-column>
 *       </e-columns>
 *      </e-aggregate>
 *    </e-aggregates>
 * </ejs-grid>
 * ```
 */
var AggregateDirective = /** @class */ (function (_super) {
    __extends(AggregateDirective, _super);
    function AggregateDirective(viewContainerRef) {
        var _this = _super.call(this) || this;
        _this.viewContainerRef = viewContainerRef;
        _this.tags = ['columns'];
        setValue('currentInstance', _this, _this.viewContainerRef);
        _this.registerEvents(outputs);
        return _this;
    }
    AggregateDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'ejs-grid>e-aggregates>e-aggregate',
                    inputs: input,
                    outputs: outputs,
                    queries: {
                        childColumns: new ContentChild(AggregateColumnsDirective)
                    }
                },] },
    ];
    /** @nocollapse */
    AggregateDirective.ctorParameters = function () { return [
        { type: ViewContainerRef, },
    ]; };
    return AggregateDirective;
}(ComplexBase));
export { AggregateDirective };
/**
 * Aggregate Array Directive
 * @private
 */
var AggregatesDirective = /** @class */ (function (_super) {
    __extends(AggregatesDirective, _super);
    function AggregatesDirective() {
        return _super.call(this, 'aggregates') || this;
    }
    AggregatesDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'ejs-grid>e-aggregates',
                    queries: {
                        children: new ContentChildren(AggregateDirective)
                    },
                },] },
    ];
    /** @nocollapse */
    AggregatesDirective.ctorParameters = function () { return []; };
    return AggregatesDirective;
}(ArrayBase));
export { AggregatesDirective };
//# sourceMappingURL=aggregates.directive.js.map