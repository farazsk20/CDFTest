import { getObject, Filter as GridFilter, Grid } from '@syncfusion/ej2-grids';
import { isNullOrUndefined, setValue } from '@syncfusion/ej2-base';
/**
 * TreeGrid Filter module will handle filtering action
 * @hidden
 */
var Filter = /** @class */ (function () {
    /**
     * Constructor for Filter module
     */
    function Filter(parent) {
        Grid.Inject(GridFilter);
        this.parent = parent;
        this.isHierarchyFilter = false;
        this.filteredResult = [];
        this.flatFilteredData = [];
        this.filteredParentRecs = [];
        this.addEventListener();
    }
    /**
     * For internal use only - Get the module name.
     * @private
     */
    Filter.prototype.getModuleName = function () {
        return 'filter';
    };
    /**
     * To destroy the Filter module
     * @return {void}
     * @hidden
     */
    Filter.prototype.destroy = function () {
        this.removeEventListener();
    };
    /**
     * @hidden
     */
    Filter.prototype.addEventListener = function () {
        this.parent.on('updateFilterRecs', this.updatedFilteredRecord, this);
        this.parent.on('clearFilters', this.clearFilterLevel, this);
    };
    /**
     * @hidden
     */
    Filter.prototype.removeEventListener = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off('updateFilterRecs', this.updatedFilteredRecord);
        this.parent.off('clearFilters', this.clearFilterLevel);
    };
    /**
     * Function to update filtered records
     *  @hidden
     */
    Filter.prototype.updatedFilteredRecord = function (dataDetails) {
        this.flatFilteredData = dataDetails.data;
        this.filteredParentRecs = [];
        this.filteredResult = [];
        this.isHierarchyFilter = false;
        var _loop_1 = function (f) {
            var rec = this_1.flatFilteredData[f];
            this_1.addParentRecord(rec);
            if (this_1.parent.filterSettings.hierarchyMode === 'Child' ||
                this_1.parent.filterSettings.hierarchyMode === 'None' || this_1.parent.searchSettings.hierarchyMode === 'Child' ||
                this_1.parent.searchSettings.hierarchyMode === 'None') {
                this_1.isHierarchyFilter = true;
            }
            var ischild = getObject('childRecords', rec);
            if (!isNullOrUndefined(ischild) && ischild.length) {
                setValue('hasFilteredChildRecords', this_1.checkChildExsist(rec), rec);
            }
            var parent_1 = getObject('parentItem', rec);
            if (!isNullOrUndefined(parent_1)) {
                var parRecord = this_1.flatFilteredData.filter(function (e) {
                    return e.uniqueID === rec.parentItem.uniqueID;
                })[0];
                setValue('hasFilteredChildRecords', true, parRecord);
            }
        };
        var this_1 = this;
        for (var f = 0; f < this.flatFilteredData.length; f++) {
            _loop_1(f);
        }
        if (this.flatFilteredData.length > 0 && this.isHierarchyFilter) {
            this.updateFilterLevel();
        }
        this.parent.notify('updateAction', { result: this.filteredResult });
    };
    Filter.prototype.addParentRecord = function (record) {
        var parent = this.parent.flatData.filter(function (e) { return e.uniqueID === record.parentUniqueID; })[0];
        if (this.parent.filterSettings.hierarchyMode === 'None' || this.parent.searchSettings.hierarchyMode === 'None') {
            if (isNullOrUndefined(parent)) {
                if (this.flatFilteredData.indexOf(record) !== -1) {
                    if (this.filteredResult.indexOf(record) === -1) {
                        this.filteredResult.push(record);
                        record.hasFilteredChildRecords = true;
                    }
                    return;
                }
            }
            else {
                this.addParentRecord(parent);
                if (this.flatFilteredData.indexOf(parent) !== -1 || this.filteredResult.indexOf(parent) !== -1) {
                    if (this.filteredResult.indexOf(record) === -1) {
                        this.filteredResult.push(record);
                    }
                }
                else {
                    if (this.filteredResult.indexOf(record) === -1 && this.flatFilteredData.indexOf(record) !== -1) {
                        this.filteredResult.push(record);
                    }
                }
            }
        }
        else {
            if (!isNullOrUndefined(parent)) {
                if (this.parent.filterSettings.hierarchyMode === 'Child'
                    || this.parent.searchSettings.hierarchyMode === 'Child') {
                    if (this.flatFilteredData.indexOf(parent) !== -1) {
                        this.addParentRecord(parent);
                    }
                }
                else {
                    this.addParentRecord(parent);
                }
            }
            if (this.filteredResult.indexOf(record) === -1) {
                this.filteredResult.push(record);
            }
        }
    };
    Filter.prototype.checkChildExsist = function (records) {
        var childRec = getObject('childRecords', records);
        var isExist = false;
        for (var count = 0; count < childRec.length; count++) {
            var ischild = getObject('childRecords', childRec[count]);
            if ((this.parent.filterSettings.hierarchyMode === 'Child' || this.parent.filterSettings.hierarchyMode === 'Both') ||
                (this.parent.searchSettings.hierarchyMode === 'Child' || this.parent.searchSettings.hierarchyMode === 'Both')) {
                this.filteredResult.push(childRec[count]);
                isExist = true;
            }
            if (this.parent.filterSettings.hierarchyMode === 'None' || this.parent.searchSettings.hierarchyMode === 'None') {
                if (this.flatFilteredData.indexOf(childRec[count] !== -1)) {
                    isExist = true;
                    break;
                }
            }
            if (!isNullOrUndefined(ischild) && ischild.length) {
                isExist = this.checkChildExsist(childRec[count]);
            }
        }
        return isExist;
    };
    Filter.prototype.updateFilterLevel = function () {
        var record = this.filteredResult;
        var len = this.filteredResult.length;
        var _loop_2 = function (c) {
            var parent_2 = this_2.parent.flatData.filter(function (e) { return e.uniqueID === record[c].parentUniqueID; })[0];
            var isPrst = record.indexOf(parent_2) !== -1;
            if (isPrst) {
                var parent_3 = this_2.filteredResult.filter(function (e) { return e.uniqueID === record[c].parentUniqueID; })[0];
                setValue('filterLevel', parent_3.filterLevel + 1, record[c]);
            }
            else {
                setValue('filterLevel', 0, record[c]);
                this_2.filteredParentRecs.push(record[c]);
            }
        };
        var this_2 = this;
        for (var c = 0; c < len; c++) {
            _loop_2(c);
        }
    };
    Filter.prototype.clearFilterLevel = function (data) {
        var count = 0;
        var flatData = data.flatData;
        var len = flatData.length;
        var currentRecord;
        for (count; count < len; count++) {
            currentRecord = flatData[count];
            var fLevel = getObject('filterLevel', currentRecord);
            if (fLevel || fLevel === 0 || !isNullOrUndefined(getObject('hasFilteredChildRecords', currentRecord))) {
                var ischild = getObject('childRecords', currentRecord);
                setValue('hasFilteredChildRecords', null, currentRecord);
                setValue('filterLevel', null, currentRecord);
            }
        }
        this.parent.notify('updateResults', { result: flatData, count: flatData.length });
    };
    return Filter;
}());
export { Filter };
