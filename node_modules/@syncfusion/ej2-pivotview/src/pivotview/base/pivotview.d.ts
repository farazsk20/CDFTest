import { Component, ModuleDeclaration } from '@syncfusion/ej2-base';
import { EmitType, ChildProperty } from '@syncfusion/ej2-base';
import { Internationalization, L10n, INotifyPropertyChanged } from '@syncfusion/ej2-base';
import { PivotEngine, IPivotValues, IPageSettings } from '../../base/engine';
import { PivotViewModel, GroupingBarSettingsModel, CellEditSettingsModel } from './pivotview-model';
import { HyperlinkSettingsModel, ConditionalSettingsModel } from './pivotview-model';
import { Tooltip } from '@syncfusion/ej2-popups';
import { AxisFields } from '../../common/grouping-bar/axis-field-renderer';
import { LoadEventArgs, EnginePopulatingEventArgs, DrillThroughEventArgs, PivotColumn } from '../../common/base/interface';
import { ResizeInfo, ScrollInfo, BeforeColumnRenderEventArgs, PivotCellSelectedEventArgs } from '../../common/base/interface';
import { CellClickEventArgs, FieldDroppedEventArgs, HyperCellClickEventArgs } from '../../common/base/interface';
import { BeforeExportEventArgs, EnginePopulatedEventArgs } from '../../common/base/interface';
import { Render } from '../renderer/render';
import { PivotCommon } from '../../common/base/pivot-common';
import { Common } from '../../common/actions/common';
import { GroupingBar } from '../../common/grouping-bar/grouping-bar';
import { DataSourceModel } from '../model/dataSource-model';
import { GridSettingsModel } from '../model/gridsettings-model';
import { PivotButton } from '../../common/actions/pivot-button';
import { PivotFieldList } from '../../pivotfieldlist/base/field-list';
import { Grid, QueryCellInfoEventArgs, HeaderCellInfoEventArgs, ColumnModel } from '@syncfusion/ej2-grids';
import { CellSelectEventArgs, CellDeselectEventArgs, RowSelectEventArgs, ResizeArgs, RowDeselectEventArgs } from '@syncfusion/ej2-grids';
import { EditSettingsModel } from '@syncfusion/ej2-grids';
import { PdfExportProperties, ExcelExportProperties, ExcelQueryCellInfoEventArgs, ColumnDragEventArgs } from '@syncfusion/ej2-grids';
import { ExcelHeaderQueryCellInfoEventArgs, PdfQueryCellInfoEventArgs, PdfHeaderQueryCellInfoEventArgs } from '@syncfusion/ej2-grids';
import { ExcelExport } from '../actions/excel-export';
import { PDFExport } from '../actions/pdf-export';
import { CalculatedField } from '../../common/calculatedfield/calculated-field';
import { KeyboardInteraction } from '../actions/keyboard';
import { PivotContextMenu } from '../../common/popups/context-menu';
import { ConditionalFormatting } from '../../common/conditionalformatting/conditional-formatting';
import { VirtualScroll } from '../actions/virtualscroll';
import { DrillThrough } from '../actions/drill-through';
import { Condition } from '../../base/types';
import { EditMode } from '../../common';
/**
 * It holds the settings of Grouping Bar.
 */
export declare class GroupingBarSettings extends ChildProperty<GroupingBarSettings> {
    /**
     * It allows to set the visibility of filter icon in GroupingBar button
     * @default true
     */
    showFilterIcon: boolean;
    /**
     * It allows to set the visibility of sort icon in GroupingBar button
     * @default true
     */
    showSortIcon: boolean;
    /**
     * It allows to set the visibility of remove icon in GroupingBar button
     * @default true
     */
    showRemoveIcon: boolean;
    /**
     * It allows to set the visibility of drop down icon in GroupingBar button
     * @default true
     */
    showValueTypeIcon: boolean;
}
/**
 * Configures the edit behavior of the Grid.
 */
export declare class CellEditSettings extends ChildProperty<CellEditSettings> implements EditSettingsModel {
    /**
     * If `allowAdding` is set to true, new records can be added to the Grid.
     * @default false
     */
    allowAdding: boolean;
    /**
     * If `allowEditing` is set to true, values can be updated in the existing record.
     * @default false
     */
    allowEditing: boolean;
    /**
     * If `allowDeleting` is set to true, existing record can be deleted from the Grid.
     * @default false
     */
    allowDeleting: boolean;
    /**
     * If `allowCommandColumns` is set to true, an additional column appended to perform CRUD operations in Grid.
     * @default false
     */
    allowCommandColumns: boolean;
    /**
     * Defines the mode to edit. The available editing modes are:
     * * Normal
     * * Dialog
     * * Batch
     * @default Normal
     */
    mode: EditMode;
    /**
     * If `allowEditOnDblClick` is set to false, Grid will not allow editing of a record on double click.
     * @default true
     */
    allowEditOnDblClick: boolean;
    /**
     * if `showConfirmDialog` is set to false, confirm dialog does not show when batch changes are saved or discarded.
     * @default true
     */
    showConfirmDialog: boolean;
    /**
     * If `showDeleteConfirmDialog` is set to true, confirm dialog will show delete action. You can also cancel delete command.
     * @default false
     */
    showDeleteConfirmDialog: boolean;
}
/**
 * Configures the conditional based hyper link settings.
 */
export declare class ConditionalSettings extends ChildProperty<ConditionalSettings> {
    /**
     * It allows to set the field name to get visibility of hyperlink based on condition.
     */
    measure: string;
    /**
     * It allows to set the label name to get visibility of hyperlink based on condition.
     */
    label: string;
    /**
     * It allows to set the filter conditions to the field.
     * @default NotEquals
     */
    conditions: Condition;
    /**
     * It allows to set the value1 get visibility of hyperlink.
     */
    value1: number;
    /**
     * It allows to set the value2 to get visibility of hyperlink.
     */
    value2: number;
}
/**
 * It holds the settings of Hyperlink.
 */
export declare class HyperlinkSettings extends ChildProperty<HyperlinkSettings> {
    /**
     * It allows to set the visibility of hyperlink in all cells
     * @default false
     */
    showHyperlink: boolean;
    /**
     * It allows to set the visibility of hyperlink in row headers
     * @default false
     */
    showRowHeaderHyperlink: boolean;
    /**
     * It allows to set the visibility of hyperlink in column headers
     * @default true
     */
    showColumnHeaderHyperlink: boolean;
    /**
     * It allows to set the visibility of hyperlink in value cells
     * @default false
     */
    showValueCellHyperlink: boolean;
    /**
     * It allows to set the visibility of hyperlink in summary cells
     * @default true
     */
    showSummaryCellHyperlink: boolean;
    /**
     * It allows to set the visibility of hyperlink based on condition
     * @default []
     */
    conditionalSettings: ConditionalSettingsModel[];
    /**
     * It allows to set the visibility of hyperlink based on header text
     */
    headerText: string;
    /**
     * It allows to set the custom class name for hyperlink options
     * @default ''
     */
    cssClass: string;
}
/**
 * Represents the PivotView component.
 * ```html
 * <div id="PivotView"></div>
 * <script>
 *  var pivotviewObj = new PivotView({ enableGroupingBar: true });
 *  pivotviewObj.appendTo("#pivotview");
 * </script>
 * ```
 */
export declare class PivotView extends Component<HTMLElement> implements INotifyPropertyChanged {
    /** @hidden */
    globalize: Internationalization;
    /** @hidden */
    localeObj: L10n;
    /** @hidden */
    tooltip: Tooltip;
    /** @hidden */
    grid: Grid;
    /** @hidden */
    isDragging: boolean;
    /** @hidden */
    isAdaptive: Boolean;
    /** @hidden */
    fieldListSpinnerElement: HTMLElement;
    /** @hidden */
    isRowCellHyperlink: Boolean;
    /** @hidden */
    isColumnCellHyperlink: Boolean;
    /** @hidden */
    isValueCellHyperlink: Boolean;
    /** @hidden */
    isSummaryCellHyperlink: Boolean;
    pivotView: PivotView;
    /** @hidden */
    renderModule: Render;
    /** @hidden */
    engineModule: PivotEngine;
    /** @hidden */
    pivotCommon: PivotCommon;
    /** @hidden */
    axisFieldModule: AxisFields;
    /** @hidden */
    groupingBarModule: GroupingBar;
    /** @hidden */
    pivotButtonModule: PivotButton;
    /** @hidden */
    commonModule: Common;
    /** @hidden */
    pivotFieldListModule: PivotFieldList;
    /** @hidden */
    excelExportModule: ExcelExport;
    /** @hidden */
    pdfExportModule: PDFExport;
    /** @hidden */
    virtualscrollModule: VirtualScroll;
    /** @hidden */
    drillThroughModule: DrillThrough;
    /** @hidden */
    calculatedFieldModule: CalculatedField;
    /** @hidden */
    conditionalFormattingModule: ConditionalFormatting;
    /** @hidden */
    keyboardModule: KeyboardInteraction;
    /** @hidden */
    contextMenuModule: PivotContextMenu;
    private defaultLocale;
    private timeOutObj;
    private isEmptyGrid;
    /** @hidden */
    pageSettings: IPageSettings;
    /** @hidden */
    virtualDiv: HTMLElement;
    /** @hidden */
    virtualHeaderDiv: HTMLElement;
    /** @hidden */
    resizeInfo: ResizeInfo;
    /** @hidden */
    scrollPosObject: ScrollInfo;
    /** @hidden */
    pivotColumns: PivotColumn[];
    /** @hidden */
    firstColWidth: number | string;
    /** @hidden */
    totColWidth: number;
    /** @hidden */
    posCount: number;
    protected needsID: boolean;
    /**
     * Defines the currencyCode format of the Pivot widget columns
     * @private
     */
    private currencyCode;
    /**
     * It allows to render pivotfieldlist.
     * @default false
     */
    showFieldList: boolean;
    /**
     * Configures the features settings of Pivot widget.
     */
    gridSettings: GridSettingsModel;
    /**
     * Configures the settings of GroupingBar.
     */
    groupingBarSettings: GroupingBarSettingsModel;
    /**
     * Configures the settings of hyperlink settings.
     */
    hyperlinkSettings: HyperlinkSettingsModel;
    /**
     * It allows the user to configure the pivot report as per the user need.
     */
    dataSource: DataSourceModel;
    /**
     * Configures the edit behavior of the Pivot Grid.
     * @default { allowAdding: false, allowEditing: false, allowDeleting: false, allowCommandColumns: false,
     * mode:'Normal', allowEditOnDblClick: true, showConfirmDialog: true, showDeleteConfirmDialog: false }
     */
    editSettings: CellEditSettingsModel;
    /**
     * It holds the pivot engine data which renders the Pivot widget.
     */
    pivotValues: IPivotValues;
    /**
     * Enables the display of GroupingBar allowing you to filter, sort, and remove fields obtained from the datasource.
     * @default false
     */
    showGroupingBar: boolean;
    /**
     * Allows to display the Tooltip on hovering value cells in pivot grid.
     * @default true
     */
    showTooltip: boolean;
    /**
     * It shows a common button for value fields to move together in column or row axis
     * @default false
     */
    showValuesButton: boolean;
    /**
     * It allows to enable calculated field in PivotView.
     * @default false
     */
    allowCalculatedField: boolean;
    /**
     * It allows to enable Value Sorting in PivotView.
     * @default false
     */
    enableValueSorting: boolean;
    /**
     * It allows to enable Conditional Formatting in PivotView.
     * @default false
     */
    allowConditionalFormatting: boolean;
    /**
     * Pivot widget. (Note change all occurrences)
     * @default auto
     */
    height: string | number;
    /**
     * It allows to set the width of Pivot widget.
     * @default auto
     */
    width: string | number;
    /**
     * If `allowExcelExport` is set to true, then it will allow the user to export pivotview to Excel file.
     * @default false
     */
    allowExcelExport: boolean;
    /**
     * If `enableVirtualization` set to true, then the Grid will render only the rows and the columns visible within the view-port
     * and load subsequent rows and columns on vertical scrolling. This helps to load large dataset in Pivot Grid.
     * @default false
     */
    enableVirtualization: boolean;
    /**
     * If `allowDrillThrough` set to true, then you can view the raw items that are used to create a
     * specified value cell in the pivot grid.
     * @default false
     */
    allowDrillThrough: boolean;
    /**
     * If `allowPdfExport` is set to true, then it will allow the user to export pivotview to Pdf file.
     * @default false
     */
    allowPdfExport: boolean;
    /**
     * If `allowDeferLayoutUpdate` is set to true, then it will enable defer layout update to pivotview.
     * @default false
     */
    allowDeferLayoutUpdate: boolean;
    /**
     * It allows to set the maximum number of nodes to be displayed in the member editor.
     * @default 1000
     */
    maxNodeLimitInMemberEditor: number;
    /** @hidden */
    protected queryCellInfo: EmitType<QueryCellInfoEventArgs>;
    /** @hidden */
    protected headerCellInfo: EmitType<HeaderCellInfoEventArgs>;
    /** @hidden */
    protected resizing: EmitType<ResizeArgs>;
    /** @hidden */
    protected resizeStop: EmitType<ResizeArgs>;
    /** @hidden */
    protected pdfHeaderQueryCellInfo: EmitType<PdfHeaderQueryCellInfoEventArgs>;
    /** @hidden */
    protected pdfQueryCellInfo: EmitType<PdfQueryCellInfoEventArgs>;
    /** @hidden */
    protected excelHeaderQueryCellInfo: EmitType<ExcelHeaderQueryCellInfoEventArgs>;
    /** @hidden */
    protected excelQueryCellInfo: EmitType<ExcelQueryCellInfoEventArgs>;
    /** @hidden */
    protected columnDragStart: EmitType<ColumnDragEventArgs>;
    /** @hidden */
    protected columnDrag: EmitType<ColumnDragEventArgs>;
    /** @hidden */
    protected columnDrop: EmitType<ColumnDragEventArgs>;
    /** @hidden */
    beforeColumnsRender: EmitType<BeforeColumnRenderEventArgs>;
    /** @hidden */
    selected: EmitType<CellSelectEventArgs>;
    /** @hidden */
    cellDeselected: EmitType<CellDeselectEventArgs>;
    /** @hidden */
    rowSelected: EmitType<RowSelectEventArgs>;
    /** @hidden */
    rowDeselected: EmitType<RowDeselectEventArgs>;
    /**
     * This allows any customization of PivotView properties on initial rendering.
     * @event
     */
    load: EmitType<LoadEventArgs>;
    /**
     * Triggers before the pivot engine starts to populate and allows to customize the pivot datasource settings.
     * @event
     */
    enginePopulating: EmitType<EnginePopulatingEventArgs>;
    /**
     * Triggers after the pivot engine populated and allows to customize the pivot widget.
     * @event
     */
    enginePopulated: EmitType<EnginePopulatedEventArgs>;
    /**
     * Triggers when a field getting dropped into any axis.
     * @event
     */
    onFieldDropped: EmitType<FieldDroppedEventArgs>;
    /**
     * Triggers when data source is populated in the Pivot View.
     * @event
     */
    dataBound: EmitType<Object>;
    /**
     * Triggers when data source is created in the Pivot View.
     * @event
     */
    created: EmitType<Object>;
    /**
     * Triggers when data source is destroyed in the Pivot View.
     * @event
     */
    destroyed: EmitType<Object>;
    /**
     * This allows to set properties for exporting.
     * @event
     */
    beforeExport: EmitType<BeforeExportEventArgs>;
    /**
     * Triggers when cell is clicked in the Pivot widget.
     * @event
     */
    cellClick: EmitType<CellClickEventArgs>;
    /**
     * Triggers when value cell is clicked in the Pivot widget on Drill-Through.
     * @event
     */
    drillThrough: EmitType<DrillThroughEventArgs>;
    /**
     * Triggers when hyperlink cell is clicked in the Pivot widget.
     * @event
     */
    hyperlinkCellClick: EmitType<HyperCellClickEventArgs>;
    /**
     * Triggers when cell got selected in Pivot widget.
     * @event
     */
    cellSelected: EmitType<PivotCellSelectedEventArgs>;
    /**
     * Constructor for creating the widget
     * @param  {PivotViewModel} options?
     * @param  {string|HTMLElement} element?
     */
    constructor(options?: PivotViewModel, element?: string | HTMLElement);
    /**
     * To provide the array of modules needed for control rendering
     * @return {ModuleDeclaration[]}
     * @hidden
     */
    requiredModules(): ModuleDeclaration[];
    /**
     * For internal use only - Initializing internal properties;
     * @private
     */
    protected preRender(): void;
    private onBeforeTooltipOpen;
    private renderToolTip;
    private initProperties;
    /**
     * Initialize the control rendering
     * @returns void
     * @hidden
     */
    render(): void;
    /**
     * Register the internal events.
     * @returns void
     * @hidden
     */
    addInternalEvents(): void;
    /**
     * De-Register the internal events.
     * @returns void
     * @hidden
     */
    removeInternalEvents(): void;
    /**
     * Get the Pivot widget properties to be maintained in the persisted state.
     * @returns {string}
     * @hidden
     */
    getPersistData(): string;
    /**
     * It returns the Module name.
     * @returns string
     * @hidden
     */
    getModuleName(): string;
    /**
     * Copy the selected rows or cells data into clipboard.
     * @param {boolean} withHeader - Specifies whether the column header text needs to be copied along with rows or cells.
     * @returns {void}
     * @hidden
     */
    copy(withHeader?: boolean): void;
    /**
     * By default, prints all the pages of the Grid and hides the pager.
     * > You can customize print options using the
     * [`printMode`](./api-pivotgrid.html#printmode-string).
     * @returns {void}
     * @hidden
     */
    /**
     * Called internally if any of the property value changed.
     * @returns void
     * @hidden
     */
    onPropertyChanged(newProp: PivotViewModel, oldProp: PivotViewModel): void;
    /**
     * Render the UI section of PivotView.
     * @returns void
     * @hidden
     */
    renderPivotGrid(): void;
    /**
     * Updates the PivotEngine using dataSource from Pivot View component.
     * @method updateDataSource
     * @return {void}
     * @hidden
     */
    updateDataSource(isRefreshGrid?: boolean): void;
    /**
     * To destroy the PivotView elements.
     * @returns void
     */
    destroy(): void;
    /**
     * Export Pivot widget data to Excel file(.xlsx).
     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the Grid.
     * @param  {boolean} isMultipleExport - Define to enable multiple export.
     * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.
     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @returns void
     */
    excelExport(excelExportProperties?: ExcelExportProperties, isMultipleExport?: boolean, workbook?: any, isBlob?: boolean): void;
    /**
     * Export PivotGrid data to CSV file.
     * @param  {ExcelExportProperties} excelExportProperties - Defines the export properties of the Grid.
     * @param  {boolean} isMultipleExport - Define to enable multiple export.
     * @param  {workbook} workbook - Defines the Workbook if multiple export is enabled.
     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @returns void
     */
    csvExport(excelExportProperties?: ExcelExportProperties, isMultipleExport?: boolean, workbook?: any, isBlob?: boolean): void;
    /**
     * Export Pivot widget data to PDF document.
     * @param  {pdfExportProperties} PdfExportProperties - Defines the export properties of the Grid.
     * @param  {isMultipleExport} isMultipleExport - Define to enable multiple export.
     * @param  {pdfDoc} pdfDoc - Defined the Pdf Document if multiple export is enabled.
     * @param  {boolean} isBlob - If 'isBlob' set to true, then it will be returned as blob data.
     * @returns void
     */
    pdfExport(pdfExportProperties?: PdfExportProperties, isMultipleExport?: boolean, pdfDoc?: Object, isBlob?: boolean): void;
    private onDrill;
    private onContentReady;
    private setToolTip;
    private getRowText;
    private getColText;
    private updateClass;
    private wireEvents;
    private mouseClickHandler;
    private framePivotColumns;
    /** @hidden */
    setGridColumns(gridcolumns: ColumnModel[]): void;
    /** @hidden */
    triggerColumnRenderEvent(gridcolumns: ColumnModel[]): void;
    /** @hidden */
    setCommonColumnsWidth(columns: ColumnModel[], width: number): void;
    /** @hidden */
    onWindowResize(): void;
    private CellClicked;
    private unwireEvents;
    private renderEmptyGrid;
    private initEngine;
    private generateData;
    private applyFormatting;
    private applyHyperlinkSettings;
    private checkCondition;
}
