import { extend, isNullOrUndefined, setValue, getValue } from '@syncfusion/ej2-base';
import { DataManager, Query, DataUtil } from '@syncfusion/ej2-data';
import { showSpinner, hideSpinner } from '@syncfusion/ej2-popups';
import { getObject, iterateExtend, getUid } from '@syncfusion/ej2-grids';
import { isRemoteData, isOffline } from '../utils';
import * as events from './constant';
import { Sort } from '../actions/sort';
/**
 * Internal dataoperations for tree grid
 * @hidden
 */
var DataManipulation = /** @class */ (function () {
    function DataManipulation(grid) {
        this.parent = grid;
        this.parentItems = [];
        this.taskIds = [];
        this.hierarchyData = [];
        this.storedIndex = -1;
        this.sortedData = [];
        this.isSortAction = false;
        this.addEventListener();
        this.dataResults = {};
        this.isSelfReference = !isNullOrUndefined(this.parent.parentIdMapping);
    }
    /**
     * @hidden
     */
    DataManipulation.prototype.addEventListener = function () {
        this.parent.on('Sorting', this.sortedRecords, this);
        this.parent.on('updateRemoteLevel', this.updateParentRemoteData, this);
        this.parent.grid.on('sorting-begin', this.beginSorting, this);
        this.parent.on('updateAction', this.updateData, this);
        this.parent.on(events.remoteExpand, this.collectExpandingRecs, this);
        this.parent.on('dataProcessor', this.dataProcessor, this);
    };
    /**
     * @hidden
     */
    DataManipulation.prototype.removeEventListener = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off(events.remoteExpand, this.collectExpandingRecs);
        this.parent.off('updateRemoteLevel', this.updateParentRemoteData);
        this.parent.off('updateAction', this.updateData);
        this.parent.off('dataProcessor', this.dataProcessor);
        this.parent.off('Sorting', this.sortedRecords);
        this.parent.grid.off('sorting-begin', this.beginSorting);
    };
    /**
     * To destroy the dataModule
     * @return {void}
     * @hidden
     */
    DataManipulation.prototype.destroy = function () {
        this.removeEventListener();
    };
    /** @hidden */
    DataManipulation.prototype.isRemote = function () {
        if (!(this.parent.dataSource instanceof DataManager)) {
            return false;
        }
        return true;
        // let gridData: DataManager = <DataManager>this.parent.dataSource;
        // return gridData.dataSource.offline !== true && gridData.dataSource.url !== undefined;
    };
    /**
     * Function to manipulate datasource
     * @hidden
     */
    DataManipulation.prototype.convertToFlatData = function (data) {
        var _this = this;
        this.parent.flatData = [];
        if ((isRemoteData(this.parent) && !isOffline(this.parent)) && data instanceof DataManager) {
            var dm = this.parent.dataSource;
            if (this.parent.parentIdMapping) {
                this.parent.query = isNullOrUndefined(this.parent.query) ?
                    new Query() : this.parent.query;
                if (this.parent.parentIdMapping) {
                    this.parent.query.where(this.parent.parentIdMapping, 'equal', null);
                }
                if (!this.parent.hasChildMapping) {
                    var qry = this.parent.query.clone();
                    qry.queries = [];
                    qry = qry.select([this.parent.parentIdMapping]);
                    dm.executeQuery(qry).then(function (e) {
                        _this.parentItems = DataUtil.distinct(e.result, _this.parent.parentIdMapping, false);
                        var req = getObject('dataSource.requests', _this.parent).filter(function (e) {
                            return e.httpRequest.statusText !== 'OK';
                        }).length;
                        if (req === 0) {
                            setValue('grid.contentModule.isLoaded', true, _this).parent;
                            if (!isNullOrUndefined(_this.zerothLevelData)) {
                                setValue('cancel', false, _this.zerothLevelData);
                                getValue('grid.renderModule', _this.parent).dataManagerSuccess(_this.zerothLevelData);
                                _this.zerothLevelData = null;
                            }
                            _this.parent.grid.hideSpinner();
                        }
                    });
                }
            }
        }
        else if (data instanceof Array) {
            this.hierarchyData = [];
            this.taskIds = [];
            for (var i = 0; i < Object.keys(data).length; i++) {
                var tempData = data[i];
                this.hierarchyData.push(extend({}, tempData, true));
                if (!isNullOrUndefined(tempData[this.parent.idMapping])) {
                    this.taskIds.push(tempData[this.parent.idMapping]);
                }
            }
            var mappingData = new DataManager(data).executeLocal(new Query()
                .where(this.parent.parentIdMapping, 'notequal', null)
                .group(this.parent.parentIdMapping));
            //let selfData: Object[] = [];
            for (var i = 0; i < mappingData.length; i++) {
                var groupData = mappingData[i];
                var index = this.taskIds.indexOf(groupData.key);
                if (index > -1) {
                    if (!isNullOrUndefined(groupData.key)) {
                        var childData = iterateExtend(groupData.items);
                        if (this.isSelfReference) {
                            if (!this.updateChildHierarchy(this.hierarchyData, this.hierarchyData[index], childData, index)) {
                                this.hierarchyData[index][this.parent.childMapping] = childData;
                                if (!isNullOrUndefined(this.hierarchyData[index][this.parent.parentIdMapping])) {
                                    this.hierarchyData.splice(index, 1);
                                    this.taskIds.splice(index, 1);
                                }
                            }
                        }
                        else {
                            this.hierarchyData[index][this.parent.childMapping] = childData;
                        }
                    }
                }
            }
            if (!Object.keys(this.hierarchyData).length) {
                this.parent.flatData = [];
            }
            else {
                this.createRecords(this.hierarchyData);
            }
            this.storedIndex = -1;
        }
        // else if (data instanceof DataManager && this.parent.isLocalData) {
        //   this.convertToFlatData(data.dataSource.json);
        // }
        //this.crudActions();
    };
    // private crudActions(): void {
    //   if (this.parent.dataSource instanceof DataManager && (this.parent.dataSource.adaptor instanceof RemoteSaveAdaptor)) {
    //     let oldUpdate: Function = this.parent.dataSource.adaptor.update;
    //     this.parent.dataSource.adaptor.update =
    //         function (dm: DataManager, keyField: string, value: Object, tableName?: string, query?: Query, original?: Object): Object {
    //                value = getPlainData(value);
    //                return oldUpdate.apply(this, [dm, keyField, value, tableName, query, original]);
    //              }
    //   }
    // }
    DataManipulation.prototype.updateChildHierarchy = function (data, currentData, childData, index) {
        var parentID = currentData[this.parent.parentIdMapping];
        var returns = false;
        var id = currentData[this.parent.idMapping];
        for (var i = 0; i < data.length; i++) {
            if (data[i][this.parent.idMapping] === parentID) {
                var childs = data[i][this.parent.childMapping];
                for (var j = 0; j < childs.length; j++) {
                    if (childs[j][this.parent.idMapping] === id) {
                        childs[j][this.parent.childMapping] = childData;
                        this.hierarchyData.splice(index, 1);
                        this.taskIds.splice(index, 1);
                        return true;
                    }
                }
            }
            else if (!isNullOrUndefined(data[i][this.parent.childMapping])) {
                returns = this.updateChildHierarchy(data[i][this.parent.childMapping], currentData, childData, index);
            }
        }
        return returns;
    };
    /**
     * Function to update the zeroth level parent records in remote binding
     * @hidden
     */
    DataManipulation.prototype.updateParentRemoteData = function (args) {
        var records = args.result;
        if (!this.parent.hasChildMapping && !this.parentItems.length) {
            this.zerothLevelData = args;
            setValue('cancel', true, args);
        }
        else {
            for (var rec = 0; rec < records.length; rec++) {
                if ((records[rec][this.parent.hasChildMapping] || this.parentItems.indexOf(records[rec][this.parent.idMapping]) !== -1)
                    && (isNullOrUndefined(records[rec].index))) {
                    records[rec].level = 0;
                    records[rec].index = Math.ceil(Math.random() * 1000);
                    records[rec].hasChildRecords = true;
                }
            }
        }
        args.result = records;
        this.parent.notify('updateResults', args);
    };
    /**
     * Function to manipulate datasource
     * @hidden
     */
    DataManipulation.prototype.collectExpandingRecs = function (rowDetails) {
        var _this = this;
        var args = { row: rowDetails.parentRow, data: rowDetails.record };
        if (rowDetails.rows.length > 0) {
            rowDetails.record.expanded = true;
            for (var i = 0; i < rowDetails.rows.length; i++) {
                rowDetails.rows[i].style.display = 'table-row';
            }
            this.parent.trigger(events.expanded, args);
        }
        else {
            var dm = this.parent.dataSource;
            var qry = this.parent.grid.getDataModule().generateQuery();
            var clonequries = qry.queries.filter(function (e) { return e.fn !== 'onPage' && e.fn !== 'onWhere'; });
            qry.queries = clonequries;
            qry.where(this.parent.parentIdMapping, 'equal', rowDetails.record[this.parent.idMapping]);
            showSpinner(this.parent.element);
            dm.executeQuery(qry).then(function (e) {
                var datas = _this.parent.grid.currentViewData;
                var inx = datas.indexOf(rowDetails.record);
                var haveChild = getObject('actual.nextLevel', e);
                var result = e.result;
                for (var r = 0; r < result.length; r++) {
                    result[r].level = rowDetails.record.level + 1;
                    result[r].index = Math.ceil(Math.random() * 1000);
                    result[r].parentItem = rowDetails.record;
                    if ((result[r][_this.parent.hasChildMapping] || _this.parentItems.indexOf(result[r][_this.parent.idMapping]) !== -1)
                        && !(haveChild && !haveChild[r])) {
                        result[r].hasChildRecords = true;
                        result[r].expanded = false;
                    }
                    datas.splice(inx + r + 1, 0, result[r]);
                }
                setValue('result', datas, e);
                setValue('action', 'beforecontentrender', e);
                _this.parent.trigger(events.actionComplete, e);
                hideSpinner(_this.parent.element);
                e.count = _this.parent.grid.pageSettings.totalRecordsCount;
                getValue('grid.renderModule', _this.parent).dataManagerSuccess(e);
                _this.parent.trigger(events.expanded, args);
            });
        }
    };
    DataManipulation.prototype.beginSorting = function () {
        this.isSortAction = true;
    };
    DataManipulation.prototype.createRecords = function (data, parentRecords) {
        for (var i = 0, len = Object.keys(data).length; i < len; i++) {
            var currentData = data[i];
            var level = 0;
            this.storedIndex++;
            currentData.index = this.storedIndex;
            if (!isNullOrUndefined(currentData[this.parent.childMapping])) {
                currentData.childRecords = currentData[this.parent.childMapping];
                currentData.hasChildRecords = true;
                currentData.expanded = !isNullOrUndefined(currentData[this.parent.expandStateMapping])
                    ? currentData[this.parent.expandStateMapping] : true;
            }
            currentData.index = currentData.hasChildRecords ? this.storedIndex : this.storedIndex;
            if (isNullOrUndefined(currentData[this.parent.parentIdMapping])) {
                this.parent.parentData.push(currentData);
            }
            currentData.uniqueID = getUid(this.parent.element.id + '_data_');
            if (!isNullOrUndefined(parentRecords)) {
                var parentData = extend({}, parentRecords);
                delete parentData.childRecords;
                delete parentData[this.parent.childMapping];
                currentData.parentItem = parentData;
                currentData.parentUniqueID = parentData.uniqueID;
                level = parentRecords.level + 1;
            }
            currentData.level = level;
            if (isNullOrUndefined(currentData[this.parent.parentIdMapping]) || currentData.parentItem) {
                this.parent.flatData.push(currentData);
            }
            if (!isNullOrUndefined(currentData[this.parent.childMapping] && currentData[this.parent.childMapping].length)) {
                this.createRecords(currentData[this.parent.childMapping], currentData);
            }
        }
    };
    DataManipulation.prototype.sortedRecords = function (data) {
        var sortedData = getObject('sortedData', data);
        this.sortedData = [];
        if (this.parent.grid.filterSettings.columns.length > 0) {
            var sortedData_1 = getObject('sortedData', data);
            var filteredData = getObject('filteredData', data);
            for (var i = 0, len = Object.keys(sortedData_1).length; i < len; i++) {
                for (var j = 0, sortlen = Object.keys(filteredData).length; j < sortlen; j++) {
                    var sortData = getObject('uniqueID', sortedData_1[i]);
                    var filterData = getObject('uniqueID', filteredData[j]);
                    if (sortData === filterData) {
                        this.sortedData.push(sortedData_1[i]);
                    }
                }
            }
        }
        else {
            for (var i = 0, len = Object.keys(sortedData).length; i < len; i++) {
                this.sortedData.push(sortedData[i]);
            }
        }
    };
    /**
     * Function to perform filtering/sorting action for local data
     * @hidden
     */
    DataManipulation.prototype.dataProcessor = function (args) {
        var dataObj = this.parent.grid.dataSource;
        var results = dataObj instanceof DataManager ? dataObj.dataSource.json : dataObj;
        var count = results.length;
        if ((this.parent.grid.allowFiltering && this.parent.grid.filterSettings.columns.length) ||
            (this.parent.grid.searchSettings.key.length > 0)) {
            var qry = new Query();
            var gridQuery = getObject('query', args);
            if (isNullOrUndefined(gridQuery)) {
                gridQuery = new Query();
                gridQuery = getValue('grid.renderModule.data', this.parent).filterQuery(gridQuery);
                gridQuery = getValue('grid.renderModule.data', this.parent).searchQuery(gridQuery);
            }
            var fltrQuery = gridQuery.queries.filter(function (q) { return q.fn === 'onWhere'; });
            var srchQuery = gridQuery.queries.filter(function (q) { return q.fn === 'onSearch'; });
            qry.queries = fltrQuery.concat(srchQuery);
            var filteredData = new DataManager(results).executeLocal(qry);
            this.parent.notify('updateFilterRecs', { data: filteredData });
            results = this.dataResults.result;
            this.dataResults.result = null;
            //this.parent.filterModule.updatedFilteredRecord(filteredData);
            if (this.parent.grid.aggregates.length > 0) {
                var query = getObject('query', args);
                if (isNullOrUndefined(gridQuery)) {
                    gridQuery = getValue('grid.renderModule.data', this.parent).aggregateQuery(new Query());
                }
                var summaryQuery = query.queries.filter(function (q) { return q.fn === 'onAggregates'; });
                results = this.parent.summaryModule.calculateSummaryValue(summaryQuery, results, true);
            }
        }
        if (this.parent.grid.aggregates.length && this.parent.grid.sortSettings.columns.length === 0
            && this.parent.grid.filterSettings.columns.length === 0 && !this.parent.grid.searchSettings.key.length) {
            var gridQuery = getObject('query', args);
            if (isNullOrUndefined(gridQuery)) {
                gridQuery = getValue('grid.renderModule.data', this.parent).aggregateQuery(new Query());
            }
            var summaryQuery = gridQuery.queries.filter(function (q) { return q.fn === 'onAggregates'; });
            results = this.parent.summaryModule.calculateSummaryValue(summaryQuery, this.parent.flatData, true);
        }
        if (this.parent.grid.sortSettings.columns.length > 0 || this.isSortAction) {
            this.isSortAction = false;
            var parentData = void 0;
            var action = 'action';
            var collpasedIndexes = [];
            if (args[action] !== 'collapse' && args[action] !== 'expand') {
                if (!this.isSelfReference && this.parent.childMapping.length > 0) {
                    parentData = iterateExtend(this.parent.dataSource);
                }
                else {
                    parentData = iterateExtend(this.parent.parentData);
                }
                var sortedData = void 0;
                var query = getObject('query', args);
                this.parent.sortModule = new Sort(this.parent);
                var srtQry = new Query();
                for (var srt = this.parent.grid.sortSettings.columns.length - 1; srt >= 0; srt--) {
                    var col = this.parent.getColumnByField(this.parent.grid.sortSettings.columns[srt].field);
                    var compFun = col.sortComparer && !this.isRemote() ?
                        col.sortComparer.bind(col) :
                        this.parent.grid.sortSettings.columns[srt].direction;
                    srtQry.sortBy(this.parent.grid.sortSettings.columns[srt].field, compFun);
                }
                var modifiedData = new DataManager(parentData).executeLocal(srtQry);
                sortedData = modifiedData;
                this.parent.notify('createSort', { modifiedData: modifiedData, parent: this.parent, srtQry: srtQry });
                this.parent.notify('createSortRecords', {
                    modifiedData: modifiedData,
                    parentRecords: null, filteredResult: results
                });
            }
            results = this.sortedData;
            this.parent.notify('updateModel', {});
            if (this.parent.grid.aggregates.length > 0) {
                var isSort = false;
                var query = getObject('query', args);
                var summaryQuery = query.queries.filter(function (q) { return q.fn === 'onAggregates'; });
                results = this.parent.summaryModule.calculateSummaryValue(summaryQuery, this.sortedData, isSort);
            }
        }
        count = results.length;
        if (this.parent.allowPaging) {
            this.parent.notify(events.pagingActions, { result: results, count: count });
            results = this.dataResults.result;
            count = this.dataResults.count;
        }
        /*if (isNullOrUndefined(this.dataResults.result)) {
          args.result = <ITreeData[]>results;
          args.count = count;
        } else {
          args.result = <ITreeData[]>this.dataResults.result;
          args.count = this.dataResults.count;
        }*/
        args.result = results;
        args.count = count;
        this.parent.notify('updateResults', args);
    };
    /**
     * update for datasource
     */
    DataManipulation.prototype.updateData = function (dataResult) {
        this.dataResults = dataResult;
    };
    return DataManipulation;
}());
export { DataManipulation };
