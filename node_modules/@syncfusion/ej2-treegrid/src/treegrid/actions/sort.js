import { isNullOrUndefined, extend } from '@syncfusion/ej2-base';
import { DataManager } from '@syncfusion/ej2-data';
import { Sort as GridSort, Grid, getObject, getUid } from '@syncfusion/ej2-grids';
/**
 * Internal dataoperations for TreeGrid
 * @hidden
 */
var Sort = /** @class */ (function () {
    function Sort(grid) {
        Grid.Inject(GridSort);
        this.parent = grid;
        this.taskIds = [];
        this.flatSortedData = [];
        this.storedIndex = -1;
        this.isSelfReference = !isNullOrUndefined(this.parent.parentIdMapping);
        this.addEventListener();
    }
    /**
     * For internal use only - Get the module name.
     * @private
     */
    Sort.prototype.getModuleName = function () {
        return 'sort';
    };
    /**
     * @hidden
     */
    Sort.prototype.addEventListener = function () {
        this.parent.on('updateModel', this.updateModel, this);
        this.parent.on('createSort', this.createdSortedRecords, this);
        this.parent.on('createSortRecords', this.createSorting, this);
    };
    /**
     * @hidden
     */
    Sort.prototype.removeEventListener = function () {
        if (this.parent.isDestroyed) {
            return;
        }
        this.parent.off('updateModel', this.updateModel);
        this.parent.off('createSort', this.createdSortedRecords);
        this.parent.off('createSortRecords', this.createSorting);
    };
    Sort.prototype.createSorting = function (data) {
        this.flatSortedData = [];
        this.createSortRecords(data);
    };
    Sort.prototype.createSortRecords = function (data) {
        var sortData = getObject('modifiedData', data);
        var parentRecords = getObject('parentRecords', data);
        var parentIndex = getObject('parentIndex', data);
        var filteredResult = getObject('filteredResult', data);
        var dataLength = Object.keys(sortData).length;
        for (var i = 0, len = dataLength; i < len; i++) {
            var currentSortData = sortData[i];
            this.storedIndex++;
            var level = 0;
            currentSortData.index = this.storedIndex;
            if (!isNullOrUndefined(currentSortData[this.parent.childMapping])) {
                currentSortData.childRecords =
                    currentSortData[this.parent.childMapping];
                currentSortData.hasChildRecords = true;
                currentSortData.expanded = true;
            }
            if (isNullOrUndefined(currentSortData.uniqueID)) {
                currentSortData.uniqueID = getUid(this.parent.element.id + '_data_');
            }
            if (!isNullOrUndefined(parentRecords)) {
                var parentData = extend({}, parentRecords);
                delete parentData.childRecords;
                delete parentData[this.parent.childMapping];
                currentSortData.parentItem = parentData;
                currentSortData.parentUniqueID = parentData.uniqueID;
                level = parentRecords.level + 1;
            }
            currentSortData.level = level;
            if (isNullOrUndefined(currentSortData[this.parent.parentIdMapping]) ||
                currentSortData.parentItem) {
                this.flatSortedData.push(currentSortData);
            }
            if (!isNullOrUndefined(currentSortData[this.parent.childMapping])) {
                this.createSortRecords({ modifiedData: currentSortData[this.parent.childMapping], parentRecords: currentSortData,
                    filteredResult: filteredResult });
            }
        }
        this.parent.notify('Sorting', { sortedData: this.flatSortedData, filteredData: filteredResult });
    };
    Sort.prototype.createdSortedRecords = function (sortingElements) {
        var data = getObject('modifiedData', sortingElements);
        var sortQuery = getObject('srtQry', sortingElements);
        var parent = getObject('parent', sortingElements);
        for (var i = 0, len = Object.keys(data).length; i < len; i++) {
            if (!isNullOrUndefined(data[i].childRecords) || !isNullOrUndefined(data[i][parent.childMapping])) {
                var sortedData = void 0;
                var sortchildData = void 0;
                if (isNullOrUndefined(data[i].childRecords)) {
                    sortedData = new DataManager(data[i][parent.childMapping]).executeLocal(sortQuery);
                }
                else {
                    sortedData = new DataManager(data[i].childRecords).executeLocal(sortQuery);
                }
                sortchildData = sortedData;
                if (sortchildData.length > 0) {
                    data[i][parent.childMapping] = sortchildData;
                }
                this.createdSortedRecords({ modifiedData: sortchildData, parent: parent, srtQry: sortQuery });
            }
        }
    };
    /**
     * Sorts a column with the given options.
     * @param {string} columnName - Defines the column name to be sorted.
     * @param {SortDirection} direction - Defines the direction of sorting field.
     * @param {boolean} isMultiSort - Specifies whether the previous sorted columns are to be maintained.
     * @return {void}
     */
    Sort.prototype.sortColumn = function (columnName, direction, isMultiSort) {
        this.parent.grid.sortColumn(columnName, direction, isMultiSort);
    };
    Sort.prototype.removeSortColumn = function (field) {
        this.parent.grid.removeSortColumn(field);
    };
    /**
     * The function used to update sortSettings of TreeGrid.
     * @return {void}
     * @hidden
     */
    Sort.prototype.updateModel = function () {
        this.parent.sortSettings = this.parent.grid.sortSettings;
    };
    /**
     * Clears all the sorted columns of the TreeGrid.
     * @return {void}
     */
    Sort.prototype.clearSorting = function () {
        this.parent.grid.clearSorting();
        this.updateModel();
    };
    /**
     * Destroys the Sorting of TreeGrid.
     * @method destroy
     * @return {void}
     */
    Sort.prototype.destroy = function () {
        this.removeEventListener();
    };
    return Sort;
}());
export { Sort };
